import { Middleware, LazyMiddlewareFactory, BranchMiddlewareCondition } from './types';
/**
 * A simple middleware compose builder
 */
export default class Composer<T = object> {
    protected middlewares: Middleware<T>[];
    /**
     * Adds middleware to the chain
     */
    use(middleware: Middleware<T>): this;
    /**
     * Lazily asynchronously gets middleware
     */
    lazy(factory: LazyMiddlewareFactory<T>): this;
    /**
     * Runs the middleware and force call `next()`
     */
    tap(middleware: Middleware<T>): this;
    /**
     * Runs the middleware at the next event loop and force call `next()`
     */
    fork(middleware: Middleware<T>): this;
    /**
     * By condition splits the middleware
     */
    branch(condition: BranchMiddlewareCondition<T>, trueMiddleware: Middleware<T>, falseMiddleware: Middleware<T>): this;
    /**
     * Conditionally runs optional middleware or skips middleware
     */
    optional(condition: BranchMiddlewareCondition<T>, optionalMiddleware: Middleware<T>): this;
    /**
     * Conditionally runs middleware or stops the chain
     */
    filter(condition: BranchMiddlewareCondition<T>, filterMiddleware: Middleware<T>): this;
    /**
     * Runs the second middleware before the main
     */
    before(middleware: Middleware<T>, beforeMiddleware: Middleware<T>): this;
    /**
     * Runs the second middleware after the main
     */
    after(middleware: Middleware<T>, afterMiddleware: Middleware<T>): this;
    /**
     * Runs middleware before and after the main
     */
    enforce(middleware: Middleware<T>, beforeMiddleware: Middleware<T>, afterMiddleware: Middleware<T>): this;
    /**
     * Concurrently launches middleware,
     * the chain will continue if `next()` is called in all middlewares
     */
    concurrency(middlewares: Middleware<T>[]): this;
    /**
     * Compose middleware handlers into a single handler
     */
    compose(): Middleware<T>;
}
