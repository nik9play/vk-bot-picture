import { VK, Keyboard, MessageContext, ContextDefaultState } from 'vk-io'
import _ from 'lodash'

const vk = new VK({
  token: process.env.BOT_TOKEN || ''
})

vk.updates.on('message_new', async (context) => {
  if (context.text == '–ù–∞—á–∞—Ç—å')
    return context.send({
      message: `üëá –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å—é–¥–∞, –∏ –±–æ—Ç –∏—Ö –ø–µ—Ä–µ–∫–∏–Ω–µ—Ç.`,
      keyboard: Keyboard.builder()
        .textButton({
          label: '–ù–∞—á–∞—Ç—å',
          payload: {
            command: '–ù–∞—á–∞—Ç—å'
          }
        })
    })

    try {
      await processPhotos(context)
    } catch (err) {
      console.error(err)
      context.send('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.')
    }
})

async function processPhotos(context: MessageContext<ContextDefaultState>) { 
  const attachments = (await vk.api.messages.getById({
    message_ids: context.id
  })).items[0].attachments

  if (attachments && context.hasAttachments('photo')) {
    let photoArray = []

    photoArray = attachments
      .filter((attachment) => attachment.type === 'photo')
      .map((photo) => {
        const accessKey = photo.photo.access_key !== undefined
        ? `_${photo.photo.access_key}`
        : '';
  
        return `${photo.type}${photo.photo.owner_id}_${photo.photo.id}${accessKey}`;
      })

    await context.send({
      attachment: photoArray.join(',')
    })
  } else {
    await context.send("‚ùå –Ø –Ω–µ –≤–∏–∂—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
  }
}

vk.updates.start().then(() => console.log('Bot started')).catch(console.error)