import {
  VK,
  Keyboard,
  MessageContext,
  ContextDefaultState,
  Upload,
  Objects,
} from "vk-io";
import _ from "lodash";

const vk = new VK({
  token: process.env.BOT_TOKEN || "",
});

vk.updates.on("message_new", async (context) => {
  if (context.$groupId === parseInt(process.env["OLD_BOT_ID"]!))
    return context.send({
      message: `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞: ${process.env["CURRENT_BOT_URL"]}`,
    });

  if (context.text == "–ù–∞—á–∞—Ç—å")
    return context.send({
      message: `üëá –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å—é–¥–∞, –∏ –±–æ—Ç –∏—Ö –ø–µ—Ä–µ–∫–∏–Ω–µ—Ç. –ë–æ—Ç –º–æ–∂–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ –æ–±—ã—á–Ω—ã—Ö –∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.`,
      keyboard: Keyboard.builder().textButton({
        label: "–ù–∞—á–∞—Ç—å",
        payload: {
          command: "–ù–∞—á–∞—Ç—å",
        },
      }),
    });

  try {
    let photosSent = false;

    const msg = (
      await vk.api.messages.getById({
        message_ids: context.id,
      })
    ).items[0];

    if (await processFwds(context, msg)) {
      photosSent = true;
    }

    if (!photosSent) {
      context.send(
        "‚ùå –Ø –Ω–µ –≤–∏–∂—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ë–æ—Ç –º–æ–∂–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –æ–±—ã—á–Ω—ã—Ö –∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."
      );
    }
  } catch (err) {
    console.error(err);
    context.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –°–æ–æ–±—â–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –æ–± —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º–µ: https://vk.me/nikitabogun");
  }
});

async function processFwds(
  context: MessageContext<ContextDefaultState>,
  msg: Objects.MessagesMessage
): Promise<boolean> {
  let photosSent = false;

  if (await processPhotos(context, msg)) {
    photosSent = true;
  }

  if (msg.fwd_messages && msg.fwd_messages.length > 0) {
    for (const forward of msg.fwd_messages) {
      if (await processFwds(context, forward)) photosSent = true;
    }
  }

  return photosSent;
}

async function processPhotos(
  initialContext: MessageContext<ContextDefaultState>,
  msg: Objects.MessagesMessage
): Promise<boolean> {
  const attachments = msg.attachments.filter(
    (attachment) => attachment.type === "photo"
  );

  if (attachments.length === 0) return false;

  if (attachments) {
    let photoArray = [];

    photoArray = attachments.map((photo) => {
      const accessKey = photo.photo.access_key
        ? `_${photo.photo.access_key}`
        : "";

      return `${photo.type}${photo.photo.owner_id}_${photo.photo.id}${accessKey}`;
    });

    if (photoArray.length > 0) {
      await initialContext.send({
        attachment: photoArray.join(","),
      });

      return true;
    }
  }
  return false;
}

vk.updates
  .start()
  .then(() => console.log("Bot started"))
  .catch(console.error);
